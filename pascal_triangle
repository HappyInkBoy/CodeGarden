# Imports for graphing
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import numpy as np

import math
import os
# Import for regular expressions
import re

print("ICS3U SUMMATIVE PROJECT: BINOMIAL EXPANSION CALCULATOR\nInput a binomial in the format of (#x+#y)^#\n")
print("# is the number/coefficient\nx is the first variable\ny is the second variable\n")
# (cx+ky)^e

regular_expressions = {
  "double_variable": "^\(([-]?[0-9]*)([a-z])([-+][0-9]*)([a-z])\)\^([0-9]+)",
  "first_single_variable": "^\(([-]?[0-9]*)([a-z])([-+][0-9]+)\)\^([0-9]+)",
  "second_single_variable": "^\(([-]?[0-9]+)([-+][0-9]*)([a-z])\)\^([0-9]+)",
  "no_variable": "^\(([-]?[0-9]+)([-+][0-9]+)\)\^([0-9]+)"
}

while True:
  # Validation for the user's input
  matching = False
  inputed_binomial = input("Input your binomial: ")
  for key in regular_expressions:
    if re.search(regular_expressions[key], inputed_binomial):
      binomial_type = key
      matching = True
      break
  if matching == True:
    break
  else:
    print("The binomial was not typed correctly")

print(binomial_type)

os.system('clear')
split_binomial = inputed_binomial.split("^")
exponent = int(split_binomial[1])

def produce_pascal_triangle(exponent):
  pascal_triangle = [[1]]

  for i in range(0,exponent):
    next_row = [1]
    for x in range(1,i+1):
      next_element = pascal_triangle[i][x] + pascal_triangle[i][x-1]
      next_row.append(next_element)
    next_row.append(1)
    pascal_triangle.append(next_row)
  return pascal_triangle

pascal_triangle = produce_pascal_triangle(exponent)

"""
for i in pascal_triangle:
  print(i)
"""

last_row = pascal_triangle[exponent]
# This list is later used as the coefficients in binomial expansion

# Just to simplify the string by removing unecessary symbols and characters
split_binomial[0] = split_binomial[0].replace('(', '')
split_binomial[0] = split_binomial[0].replace(')', '')
# The 1 in the argument simply means that the replace() function will only replace the + sign once
# This is done to prevent the other + sign from being replaced
if split_binomial[0][0] == "+":
  split_binomial[0] = split_binomial[0].replace('+', '', 1)
print(split_binomial)
# At this point:
# "cx+ky","e"

def does_binomial_have_variables(terms):
  term1_has_variable = False
  for l in terms[0]:
    if l.isalpha() == True:
      term1_has_variable = True
  # Checks if term 1 has any variables
  term2_has_variable = False
  for l in terms[1]:
    if l.isalpha() == True:
      term2_has_variable = True
  return term1_has_variable, term2_has_variable

def what_kind_of_binomial(term1_has_variable, term2_has_variable):
  if term1_has_variable == True and term2_has_variable == True:
    binomial_type = "double_variable"
    if terms[0][len(terms[0])-1] == terms[1][len(terms[1])-1]:
      # Checks if the two variables on each side are actually just the same variable
      binomial_type = "simple_single_variable"
  elif term1_has_variable == True and term2_has_variable == False:
    binomial_type = "first_single_variable"
  elif term1_has_variable == False and term2_has_variable == True:
    binomial_type = "second_single_variable"
  elif term1_has_variable == False and term2_has_variable == False:
    binomial_type = "no_variable"
  # These if statements are making a variable that stores what kind of binomial was inputed
  return binomial_type

# The following if statements are checking how many negative values are in the binomial to know how to deal with them
if "-" not in split_binomial[0]:
  binomial_sign = "positive"
  terms = split_binomial[0].split("+")
  # At this point:
  # "cx","ky","e"

  # This is where the program will have to identify what kind of binomial was inputed
  term1_has_variable = does_binomial_have_variables(terms)[0]
  term2_has_variable = does_binomial_have_variables(terms)[1]

  binomial_type = what_kind_of_binomial(term1_has_variable, term2_has_variable)
elif "-" in split_binomial[0] and "+" in split_binomial[0]:
  binomial_sign = "left_negative"
  terms = split_binomial[0].split("+")
  # At this point:
  # "cx","ky","e"

  # This is where the program will have to identify what kind of binomial was inputed
  term1_has_variable = does_binomial_have_variables(terms)[0]
  term2_has_variable = does_binomial_have_variables(terms)[1]

  binomial_type = what_kind_of_binomial(term1_has_variable, term2_has_variable)
elif "-" in split_binomial[0]:
  terms = split_binomial[0].split("-")
  if len(terms) == 3:
    binomial_sign = "double_negative"
    """
    The reason why I check for a length of 3 is because if you split the binomial that has two negative signs, it will produce a list with three elements
    The first element in that list would be an empty string "" because when the split function has two thigns to split, it will split the string into three elements
    """
    # The binomial has 2 negative coefficients
    terms.pop(0)

    term1_has_variable = does_binomial_have_variables(terms)[0]
    term2_has_variable = does_binomial_have_variables(terms)[1]
    binomial_type = what_kind_of_binomial(term1_has_variable, term2_has_variable)
    print(binomial_type)
  elif len(terms) == 2:
    # The binomial has 1 negative coefficient
    binomial_sign = "right_negative"

    term1_has_variable = does_binomial_have_variables(terms)[0]
    term2_has_variable = does_binomial_have_variables(terms)[1]

    binomial_type = what_kind_of_binomial(term1_has_variable, term2_has_variable)

superscripts = ["⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹"]

def format_exponent(exponent):
  # This just takes an exponent value and converts it into a superscript
  result = ""
  for i in str(exponent):
    value = int(i)
    result = result + superscripts[value]
  return result

def simplify_easy_binomial(terms, exponent, binomial_sign):
  coefficient1 = terms[0].replace(terms[0][len(terms[0])-1], '')
  if coefficient1 == "":
    coefficient1 = "1"
  elif coefficient1 == "-":
    coefficient1 = "-1"
  coefficient2 = terms[1].replace(terms[1][len(terms[1])-1], '')
  if coefficient2 == "":
    coefficient2 = "1"
  variable = terms[0][len(terms[0])-1]
  # Seperates the coefficients from the variables
  better_exponent = format_exponent(exponent)
  if binomial_sign == "double_negative":
    final_coefficient = str((-1*(int(coefficient1) + int(coefficient2)))**int(exponent))
  elif binomial_sign == "right_negative":
    final_coefficient = str((int(coefficient1) - int(coefficient2))**int(exponent))
  else:
    final_coefficient = str((int(coefficient1) + int(coefficient2))**int(exponent))
  if final_coefficient == "0":
    expanded_binomial = final_coefficient
  else:
    expanded_binomial = final_coefficient + variable + better_exponent
  return expanded_binomial, final_coefficient

def double_unique_variables(terms, exponent, binomial_sign, last_row):
  coefficient1 = terms[0].replace(terms[0][len(terms[0])-1], '')
  if coefficient1 == "":
    coefficient1 = "1"
  elif coefficient1 == "-":
    coefficient1 = "-1"
  coefficient2 = terms[1].replace(terms[1][len(terms[1])-1], '')
  if coefficient2 == "":
    coefficient2 = "1"
  variable1 = terms[0][len(terms[0])-1]
  variable2 = terms[1][len(terms[1])-1]

  expanded_binomial = []
  # Start the binomial expansion with a pure positive binomial to make things simple
  for i in range(0,len(last_row)):
    triangle_coefficient = last_row[i]
    # Finds the coefficient of this term in expanded form
    if binomial_sign == "double_negative":
      exponentiated_coefficient1 = (-1*int(coefficient1)) ** (len(last_row)-1-i)
    else:
      exponentiated_coefficient1 = int(coefficient1) ** (len(last_row)-1-i)
    if binomial_sign == "right_negative" or binomial_sign == "double_negative":
      exponentiated_coefficient2 = (-1*int(coefficient2)) ** i
    else:
      exponentiated_coefficient2 = int(coefficient2) ** i
    term_coefficient = str(triangle_coefficient * exponentiated_coefficient1 * exponentiated_coefficient2)
    if term_coefficient == "1":
      term_coefficient = ""
    elif term_coefficient == "-1":
      term_coefficient = "-"
    exponentiated_variable1 = variable1 + format_exponent((len(last_row)-1-i))
    exponentiated_variable2 = variable2 + format_exponent(i)
    if format_exponent(i) == "⁰":
      exponentiated_variable2 = ""
    elif format_exponent(i) == "¹":
      exponentiated_variable2 = variable2
    if format_exponent((len(last_row)-1-i)) == "⁰":
      exponentiated_variable1 = ""
    elif format_exponent((len(last_row)-1-i)) == "¹":
      exponentiated_variable1 = variable1
    expanded_term = term_coefficient + exponentiated_variable1 + exponentiated_variable2
    # This check prevents a term that is being multiplied by 0 to be later printed out as part of the expanded binomial
    if term_coefficient != "0":
      expanded_binomial.append(expanded_term)
  return expanded_binomial

def expand_single_variable(terms, exponent, binomial_sign, last_row, binomial_type):
  # The binomial variables are set as an empty string where they are then defined in an if statement
  # This is done because one of the terms does not have a variable
  variable1 = ""
  variable2 = ""
  if binomial_type == "first_single_variable":
    coefficient1 = terms[0].replace(terms[0][len(terms[0])-1], '')
    coefficient2 = terms[1]
    variable1 = terms[0][len(terms[0])-1]
    # Checks if the variable has a coefficient of 1 or -1 by seeing if it is empty or has a negative sign
    if coefficient1 == "":
      coefficient1 = "1"
    elif coefficient1 == "-":
      coefficient1 = "-1"
  elif binomial_type == "second_single_variable":
    coefficient1 = terms[0]
    coefficient2 = terms[1].replace(terms[1][len(terms[1])-1], '')
    variable2 = terms[1][len(terms[1])-1]
    if coefficient2 == "":
      coefficient2 = "1"
    # The program does not check for a - sign for the second term because the way that binomials with a negative second term are split results in the - sign being deleted (however, the program still remembers which values are negative)

  # Binomial expansion
  expanded_binomial = []
  for i in range(0,len(last_row)):
    triangle_coefficient = last_row[i]
    # Finds the coefficient of this term in expanded form
    if binomial_sign == "double_negative":
      exponentiated_coefficient1 = (-1*int(coefficient1)) ** (len(last_row)-1-i)
    else:
      exponentiated_coefficient1 = int(coefficient1) ** (len(last_row)-1-i)
    if binomial_sign == "right_negative" or binomial_sign == "double_negative":
      exponentiated_coefficient2 = (-1*int(coefficient2)) ** i
    else:
      exponentiated_coefficient2 = int(coefficient2) ** i
    term_coefficient = str(triangle_coefficient * exponentiated_coefficient1 * exponentiated_coefficient2)
    if variable1 != "":
      exponentiated_variable1 = variable1 + format_exponent((len(last_row)-1-i))
      if format_exponent((len(last_row)-1-i)) == "⁰":
        exponentiated_variable1 = ""
      elif format_exponent((len(last_row)-1-i)) == "¹":
        exponentiated_variable1 = variable1
    else:
      exponentiated_variable1 = ""
    if variable2 != "":
      exponentiated_variable2 = variable2 + format_exponent(i)
      if format_exponent(i) == "⁰":
        exponentiated_variable2 = ""
      elif format_exponent(i) == "¹":
        exponentiated_variable2 = variable2
    else:
      exponentiated_variable2 = ""
    # The program can only simplify 1 -> "" or -1 -> "-" if there is at least one variable in that term
    # Otherwise, the program could output a negative sign or empty string if there is no variable next to the coefficient
    if term_coefficient == "1" and (exponentiated_variable1 != "" or exponentiated_variable2 != ""):
      term_coefficient = ""
    elif term_coefficient == "-1" and (exponentiated_variable1 != "" or exponentiated_variable2 != ""):
      term_coefficient = "-"
    expanded_term = term_coefficient + exponentiated_variable1 + exponentiated_variable2
    if term_coefficient != "0":
      expanded_binomial.append(expanded_term)
  print(expanded_binomial)
  return expanded_binomial

def simplify_constant(terms, exponent, binomial_sign):
  if binomial_sign == "double_negative":
    simplified_term = (-1*(int(terms[0]) + int(terms[1])))**int(exponent)
  elif binomial_sign == "right_negative":
    simplified_term = (int(terms[0]) - int(terms[1]))**int(exponent)
  else:
    simplified_term = (int(terms[0]) + int(terms[1]))**int(exponent)
  expanded_binomial = str(simplified_term)
  return expanded_binomial

if exponent == 0:
  # allows the program to skip all the binomial expansion stuff since anything to the power of 0 is equal to 1
  final_expanded_binomial = "1"
elif binomial_type == "simple_single_variable":
  final_expanded_binomial = simplify_easy_binomial(terms, exponent, binomial_sign)[0]
  # This coefficient will later be used for the graphing component
  simple_binomial_coefficient = simplify_easy_binomial(terms, exponent, binomial_sign)[1]
elif binomial_type == "no_variable":
  final_expanded_binomial = simplify_constant(terms, exponent, binomial_sign)
elif binomial_type == "double_variable":
  expanded_binomial = double_unique_variables(terms, exponent, binomial_sign, last_row)
  final_expanded_binomial = ""
  for i in range(0,len(expanded_binomial)):
    # The i+1 is done so that the loop will check if the next term is negative or positive and it will concatenate either a - sign or a + sign
    if i == 0:
      final_expanded_binomial = final_expanded_binomial + expanded_binomial[0]
    elif expanded_binomial[i][0] == "-":
      output_term = expanded_binomial[i].replace('-', '')
      final_expanded_binomial = final_expanded_binomial + " " + "-" + " " + output_term
    elif expanded_binomial[i][0] != "-":
      final_expanded_binomial = final_expanded_binomial + " " + "+" + " " + expanded_binomial[i]
elif binomial_type == "first_single_variable" or binomial_type == "second_single_variable":
  expanded_binomial = expand_single_variable(terms, exponent, binomial_sign, last_row, binomial_type)
  final_expanded_binomial = ""
  for i in range(0,len(expanded_binomial)):
    # The i+1 is done so that the loop will check if the next term is negative or positive and it will concatenate either a - sign or a + sign
    if i == 0:
      final_expanded_binomial = final_expanded_binomial + expanded_binomial[0]
    elif expanded_binomial[i][0] == "-":
      output_term = expanded_binomial[i].replace('-', '')
      final_expanded_binomial = final_expanded_binomial + " " + "-" + " " + output_term
    elif expanded_binomial[i][0] != "-":
      final_expanded_binomial = final_expanded_binomial + " " + "+" + " " + expanded_binomial[i]

print(f"Expanded binomial: {final_expanded_binomial}")

print("Terms:", terms)

# This is to format the term with the variable to have either a 1 or -1 to avoid a bug that happened when the graph code checks if the variable is multiplied by 0
if binomial_type == "first_single_variable":
  if terms[0].replace(terms[0][len(terms[0])-1], '') == "":
    terms[0] = "1" + terms[0]
  elif terms[0].replace(terms[0][len(terms[0])-1], '') == "-":
    terms[0] = terms[0].replace("-", "-1")
elif binomial_type == "second_single_variable":
  if terms[1].replace(terms[1][len(terms[1])-1], '') == "":
    terms[1] = "1" + terms[1]
  elif terms[1].replace(terms[1][len(terms[1])-1], '') == "-":
    terms[1] = terms[1].replace("-", "-1")

# Below here is the code for the graphing

def three_dimensional_graphing_function(x,y,terms):
  # This function is used to make the equation for z in the 3d graph
  terms[0] = terms[0].replace(terms[0][len(terms[0])-1], "")
  if terms[0] == "":
    terms[0] = "1"
  elif terms[0] == "-":
    terms[0] = "-1"
  terms[1] = terms[1].replace(terms[1][len(terms[1])-1], "")
  if terms[1] == "":
    terms[1] = "1"
  elif terms[1] == "-":
    terms[1] = "-1"
  z = (int(terms[0])*x + int(terms[1])*y)**exponent
  return z

# The program can only make 2d graphs for binomials with one inputed variable like (2x+1)^3
# The != 0 check is done to make sure that the program will only graph the binomial if the variable is not multiplied by 0 (since there would not be an equation to graph)
if binomial_type == "first_single_variable" and int(terms[0].replace(terms[0][len(terms[0])-1], '')) != 0:
  if terms[0].replace(terms[0][len(terms[0])-1], '') == "":
    first_coefficient = 1
  elif terms[0].replace(terms[0][len(terms[0])-1], '') == "-":
    first_coefficient = -1
  else:
    first_coefficient = int(terms[0].replace(terms[0][len(terms[0])-1], ''))
  second_coefficient = int(terms[1])
  # Implements a horizontal translation for the linspace function's parameters (so that the binomial can be better represented)
  # The second coefficient is used here because for this kind of binomial, that number is the horizontal translation of the binomial
  start = -4 - (second_coefficient/first_coefficient)
  end = 4 - (second_coefficient/first_coefficient)

  x = np.linspace(start, end, 100)
  # This is the equation of the binomial
  y = (first_coefficient*x + second_coefficient)**exponent

  fig = plt.figure(figsize = (10, 5))
  # Create the plot
  plt.plot(x, y)
  
  # Show the plot
  plt.show()
elif binomial_type == "second_single_variable" and int(terms[1].replace(terms[1][len(terms[1])-1], '')) != 0:
  if terms[1].replace(terms[1][len(terms[1])-1], '') == "":
    second_coefficient = 1
  elif terms[1].replace(terms[1][len(terms[1])-1], '') == "-":
    second_coefficient = -1
  else:
    second_coefficient = int(terms[1].replace(terms[1][len(terms[1])-1], ''))
  first_coefficient = int(terms[0])
  # Implements a horizontal translation for the linspace function's parameters (so that the binomial can be better represented)
  start = -4 - (first_coefficient/second_coefficient)
  end = 4 - (first_coefficient/second_coefficient)

  x = np.linspace(start, end, 100)
  y = (first_coefficient + second_coefficient*x)**exponent

  fig = plt.figure(figsize = (10, 5))
  # Create the plot
  plt.plot(x, y)
  
  # Show the plot
  plt.show()
elif binomial_type == "simple_single_variable":

  # I don't use variables for this linspace function b/c the binomial has no horizontal translation
  x = np.linspace(-4, 4, 100)
  y = (int(simple_binomial_coefficient)*x)**exponent

  fig = plt.figure(figsize = (10, 5))
  # Create the plot
  plt.plot(x, y)
  
  # Show the plot
  plt.show()
elif binomial_type == "double_variable":
  # This produces the range of values that will be used to graph the binomial
  x = np.linspace(-1, 1, 40)
  y = np.linspace(-1, 1, 40)

  # This produces a 3d contour graph of the binomial
  X, Y = np.meshgrid(x, y)
  Z = three_dimensional_graphing_function(X, Y, terms)

  fig = plt.figure(figsize=(10, 8))
  ax = plt.axes(projection='3d')
  
  ax.plot_surface(X, Y, Z, cmap='cool', alpha=0.8)
  
  ax.set_xlabel('x', fontsize=12)
  ax.set_ylabel('y', fontsize=12)
  ax.set_zlabel('z', fontsize=12)

  plt.show()

# 3D GRAPHING CODE


print(binomial_type)

"""
How to use matplotlib for the 2d & 3d graphing: https://www.kaggle.com/code/imoore/2d-and-3d-plotting-tutorial-in-python
How I learned about the 3d graphing: https://www.geeksforgeeks.org/three-dimensional-plotting-in-python-using-matplotlib/
"""
